%% File : sfcn_digitalReadEnergia.tlc
%%
%% Description: 
%%   Simulink Coder TLC Code Generation file for sfcn_digitalReadEnergia
%%
%% Simulink version      : 8.2 (R2013b) 08-Aug-2013
%% TLC file generated on : 21-Jun-2015 21:41:05

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'sfcn_digitalReadEnergia';
     def.OutputFcnSpec = 'uint8 y1 = digitalReadEnergia(uint8 p1)';
     def.StartFcnSpec = 'void digitalModeInitialize(uint8 p1, uint8 p2)';
     def.HeaderFiles = {'gpioEnergia.h'};
     def.SourceFiles = {'gpioEnergia.c'};
     def.IncPaths = {'C:\MATLAB\SupportPackages\R2013b\TM4C1294NPDT\blocks\src\'};
     def.SrcPaths = {'C:\MATLAB\SupportPackages\R2013b\TM4C1294NPDT\blocks\src\'};
     def.SampleTime = 'parameterized';
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
 %/

%implements sfcn_digitalReadEnergia "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% The Target Language must be C
  %if ::GenCPP==1
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
  %endif

  %<LibAddToCommonIncludes("gpioEnergia.h")>
  %<SLibAddToStaticSources("gpioEnergia.c")>

  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibBlockSetIsExpressionCompliant(block)>
  %%
%endfunction

%% Function: Start ========================================================
%%
%function Start(block, system) Output
  %%
  %assign p1_val = LibBlockParameter(p1, "", "", 0)
  %assign p2_val = LibBlockParameter(p2, "", "", 0)
  %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
  digitalModeInitialize( (uint8_T)%<p1_val>, (uint8_T)%<p2_val>);
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
    %if !LibBlockOutputSignalIsExpr(0)
    %assign p1_val = LibBlockParameter(p1, "", "", 0)
    %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
    %%
    %<y1_val> = digitalReadEnergia( (uint8_T)%<p1_val>);
    %endif 
  %%
%endfunction

%% Function: BlockOutputSignal ============================================
%%
%function BlockOutputSignal(block,system,portIdx,ucv,lcv,idx,retType) void
  %%
  %assign p1_val = LibBlockParameter(p1, "", "", 0)
  %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
  %%
  %switch retType
    %case "Signal"
      %if portIdx == 0
        %return "digitalReadEnergia( (uint8_T)%<p1_val>)"
      %else
        %assign errTxt = "Block output port index not supported: %<portIdx>"
        %<LibBlockReportError(block,errTxt)>
      %endif
    %default
      %assign errTxt = "Unsupported return type: %<retType>"
      %<LibBlockReportError(block,errTxt)>
  %endswitch
  %%
%endfunction

%% [EOF]
